$date
	Sun Jun 08 12:13:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Control_tb $end
$var wire 1 ! unsigned_load $end
$var wire 1 " two_byte $end
$var wire 1 # one_byte $end
$var wire 1 $ four_bytes $end
$var wire 1 % RegWrite $end
$var wire 1 & MemtoReg $end
$var wire 1 ' MemWrite $end
$var wire 1 ( MemRead $end
$var wire 1 ) Jump $end
$var wire 1 * Branch $end
$var wire 1 + ALUSrc $end
$var wire 2 , ALUOp [1:0] $end
$var parameter 32 - WIDTH $end
$var reg 3 . func3 [2:0] $end
$var reg 7 / opcode [6:0] $end
$var integer 32 0 fail_count [31:0] $end
$var integer 32 1 pass_count [31:0] $end
$var integer 32 2 test_count [31:0] $end
$scope module uut $end
$var wire 3 3 func3 [2:0] $end
$var wire 7 4 opcode [6:0] $end
$var reg 2 5 ALUOp [1:0] $end
$var reg 1 + ALUSrc $end
$var reg 1 * Branch $end
$var reg 1 ) Jump $end
$var reg 1 ( MemRead $end
$var reg 1 ' MemWrite $end
$var reg 1 & MemtoReg $end
$var reg 1 % RegWrite $end
$var reg 1 $ four_bytes $end
$var reg 1 # one_byte $end
$var reg 1 " two_byte $end
$var reg 1 ! unsigned_load $end
$upscope $end
$scope task verify_signals $end
$var reg 2 6 exp_ALUOp [1:0] $end
$var reg 1 7 exp_ALUSrc $end
$var reg 1 8 exp_Branch $end
$var reg 1 9 exp_Jump $end
$var reg 1 : exp_MemRead $end
$var reg 1 ; exp_MemWrite $end
$var reg 1 < exp_MemtoReg $end
$var reg 1 = exp_RegWrite $end
$var reg 1 > exp_four_bytes $end
$var reg 1 ? exp_one_byte $end
$var reg 1 @ exp_two_byte $end
$var reg 1 A exp_unsigned_load $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 -
$end
#0
$dumpvars
0A
0@
0?
0>
1=
0<
0;
0:
09
08
07
b10 6
b10 5
b110011 4
b0 3
b1 2
b0 1
b0 0
b110011 /
b0 .
b10 ,
0+
0*
0)
0(
0'
0&
1%
0$
0#
0"
0!
$end
#1000
1#
1&
1(
1+
b0 ,
b0 5
1%
b10 2
1?
b0 6
1<
1:
17
b11 /
b11 4
b1 1
#2000
1"
0#
1&
1(
1+
1%
b11 2
1@
0?
b1 .
b1 3
b10 1
#3000
1$
0"
1&
1(
1+
1%
b100 2
1>
0@
b10 .
b10 3
b11 1
#4000
1!
1#
0$
1&
1(
1+
1%
b101 2
1A
0>
1?
b100 .
b100 3
b100 1
#5000
1"
1!
0#
1&
1(
1+
1%
b110 2
1@
0?
b101 .
b101 3
b101 1
#6000
b11 ,
b11 5
0!
0"
0&
0(
1+
1%
b111 2
0A
0@
b11 6
0<
0:
b0 .
b0 3
b10011 /
b10011 4
b110 1
#7000
1#
1'
b0 ,
b0 5
1+
0%
b1000 2
1?
b0 6
1;
0=
b100011 /
b100011 4
b111 1
#8000
1"
0#
1'
1+
b1001 2
1@
0?
b1 .
b1 3
b1000 1
#9000
1$
0"
1'
1+
b1010 2
1>
0@
b10 .
b10 3
b1001 1
#10000
b1 ,
b1 5
1*
0$
0'
0+
b1011 2
0>
b1 6
18
0;
07
b0 .
b0 3
b1100011 /
b1100011 4
b1010 1
#11000
1+
1%
b0 ,
b0 5
0*
b1100 2
b0 6
08
17
1=
b110111 /
b110111 4
b1011 1
#12000
1+
1%
b1101 2
b10111 /
b10111 4
b1100 1
#13000
1)
0+
1%
b1110 2
19
07
b1101111 /
b1101111 4
b1101 1
#14000
1+
1)
1%
b1111 2
17
b1100111 /
b1100111 4
b1110 1
#15000
0)
0+
0%
b10000 2
09
07
0=
b1111111 /
b1111111 4
b1111 1
#16000
1$
1&
1(
1+
1%
b10001 2
1>
1<
1:
17
1=
b111 .
b111 3
b11 /
b11 4
b10000 1
#17000
1'
1$
0&
0(
1+
0%
b10010 2
0<
1;
0:
0=
b100011 /
b100011 4
b10001 1
#18000
b10010 1
