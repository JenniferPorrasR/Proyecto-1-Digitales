$date
	Sun Jun 08 12:46:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALUControl_tb $end
$var wire 4 ! ALUCtrl [3:0] $end
$var reg 2 " ALUOp [1:0] $end
$var reg 3 # func3 [2:0] $end
$var reg 7 $ func7 [6:0] $end
$var integer 32 % fail_count [31:0] $end
$var integer 32 & pass_count [31:0] $end
$var integer 32 ' test_count [31:0] $end
$scope module uut $end
$var wire 2 ( ALUOp [1:0] $end
$var wire 3 ) func3 [2:0] $end
$var wire 7 * func7 [6:0] $end
$var reg 4 + ALUCtrl [3:0] $end
$upscope $end
$scope task verify_alucontrol $end
$var reg 4 , expected_ctrl [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10 ,
b10 +
b0 *
b0 )
b0 (
b1 '
b0 &
b0 %
b0 $
b0 #
b0 "
b10 !
$end
#1000
b1100 !
b1100 +
b10 '
b1100 ,
b1 "
b1 (
b1 &
#2000
b1101 !
b1101 +
b11 '
b1101 ,
b1 #
b1 )
b10 &
#3000
b1110 !
b1110 +
b100 '
b1110 ,
b100 #
b100 )
b11 &
#4000
b1111 !
b1111 +
b101 '
b1111 ,
b101 #
b101 )
b100 &
#5000
b101 !
b101 +
b110 '
b101 ,
b110 #
b110 )
b101 &
#6000
b111 !
b111 +
b111 '
b111 ,
b111 #
b111 )
b110 &
#7000
b1100 !
b1100 +
b1000 '
b1100 ,
b10 #
b10 )
b111 &
#8000
b10 !
b10 +
b1001 '
b10 ,
b0 #
b0 )
b10 "
b10 (
b1000 &
#9000
b110 !
b110 +
b1010 '
b110 ,
b100000 $
b100000 *
b1001 &
#10000
b1000 !
b1000 +
b1011 '
b1000 ,
b0 $
b0 *
b1 #
b1 )
b1010 &
#11000
b100 !
b100 +
b1100 '
b100 ,
b10 #
b10 )
b1011 &
#12000
b11 !
b11 +
b1101 '
b11 ,
b11 #
b11 )
b1100 &
#13000
b1001 !
b1001 +
b1110 '
b1001 ,
b100 #
b100 )
b1101 &
#14000
b1010 !
b1010 +
b1111 '
b1010 ,
b101 #
b101 )
b1110 &
#15000
b1011 !
b1011 +
b10000 '
b1011 ,
b100000 $
b100000 *
b1111 &
#16000
b1 !
b1 +
b10001 '
b1 ,
b110 #
b110 )
b10000 &
#17000
b0 !
b0 +
b10010 '
b0 ,
b111 #
b111 )
b10001 &
#18000
b10 !
b10 +
b10011 '
b10 ,
b0 $
b0 *
b0 #
b0 )
b11 "
b11 (
b10010 &
#19000
b1000 !
b1000 +
b10100 '
b1000 ,
b1 #
b1 )
b10011 &
#20000
b100 !
b100 +
b10101 '
b100 ,
b10 #
b10 )
b10100 &
#21000
b11 !
b11 +
b10110 '
b11 ,
b11 #
b11 )
b10101 &
#22000
b1001 !
b1001 +
b10111 '
b1001 ,
b100 #
b100 )
b10110 &
#23000
b1010 !
b1010 +
b11000 '
b1010 ,
b101 #
b101 )
b10111 &
#24000
b1011 !
b1011 +
b11001 '
b1011 ,
b100000 $
b100000 *
b11000 &
#25000
b1 !
b1 +
b11010 '
b1 ,
b110 #
b110 )
b11001 &
#26000
b0 !
b0 +
b11011 '
b0 ,
b111 #
b111 )
b11010 &
#27000
b10 !
b10 +
b0 "
b0 (
b11011 &
#28000
b11100 '
b10 ,
b0 $
b0 *
b0 #
b0 )
bx "
bx (
#29000
b11101 '
bx #
bx )
b10 "
b10 (
b11100 &
#30000
b11110 '
b11 "
b11 (
b11101 &
#31000
b11110 &
